# import pandas as pd
# from scipy.stats import ttest_ind
# import matplotlib.pyplot as plt



# # Load the data
# data = pd.read_csv('/home/dataset/EDS-1013.gct', sep='\t', skiprows=2)

# # Extract subtype metadata
# subtypes = data.loc[data['id'] == 'subtype'].iloc[0, 5:].to_dict()

# # Filter out the metadata rows
# data_filtered = data.iloc[5:].set_index('id')

# # Convert data to numeric
# data_numeric = data_filtered.drop(columns=['PROBE', 'Name_GeneSymbol', 'ID_geneid', 'DESCRIPTION']).apply(pd.to_numeric, errors='coerce')

# # Separate the dataset based on the subtypes "basal" and "luminal"
# basal_columns = [col for col, subtype in subtypes.items() if subtype == 'Basal']
# luminal_columns = [col for col, subtype in subtypes.items() if subtype == 'Luminal']

# # Perform t-test for each gene on the numeric data
# t_statistics = []
# p_values = []

# for index, row in data_numeric.iterrows():
#     basal_values = row[basal_columns].dropna()
#     luminal_values = row[luminal_columns].dropna()
    
#     # Check if both basal and luminal groups have at least 2 values to perform t-test
#     if len(basal_values) >= 2 and len(luminal_values) >= 2:
#         t_stat, p_val = ttest_ind(basal_values, luminal_values, equal_var=False, nan_policy='omit')
#         t_statistics.append(t_stat)
#         p_values.append(p_val)
#     else:
#         t_statistics.append(None)
#         p_values.append(None)

# # Add the t-statistics and p-values to the dataframe
# data_numeric['t-statistic'] = t_statistics
# data_numeric['p-value'] = p_values

# # Extract the t-statistics report
# t_statistics_report = data_numeric[['t-statistic', 'p-value']]
# print(t_statistics_report)


# hdac7_data = data_numeric.loc['HDAC7']

# # Using pandas to create the boxplot for HDAC7 expression across subtypes
# # Prepare data for plotting
# plot_data_df = pd.DataFrame({
#     'Basal': hdac7_data[basal_columns].dropna(),
#     'Luminal': hdac7_data[luminal_columns].dropna()
# })

# # Create the boxplot using pandas
# ax = plot_data_df.boxplot(grid=False, notch=True, figsize=(10, 6))
# ax.set_title('Boxplot for HDAC7 Expression Across Subtypes')
# ax.set_ylabel('Expression Level')
# plt.show()


# plt.savefig('/home/dataset/charts/HDAC_7-boxplot.png')



# import pandas as pd
# import matplotlib.pyplot as plt

# # Load the data
# data = pd.read_csv('/home/dataset/EDS-1013.gct', sep='\t', skiprows=2)

# # Extract subtype metadata
# subtypes = data.loc[data['id'] == 'subtype'].iloc[0, 5:].to_dict()

# # Filter out the metadata rows
# data_filtered = data.iloc[5:].set_index('id')

# # Convert data to numeric
# data_numeric = data_filtered.drop(columns=['PROBE', 'Name_GeneSymbol', 'ID_geneid', 'DESCRIPTION']).apply(pd.to_numeric, errors='coerce')

# # Separate the dataset based on the subtypes "basal" and "luminal"
# basal_columns = [col for col, subtype in subtypes.items() if subtype == 'Basal']
# luminal_columns = [col for col, subtype in subtypes.items() if subtype == 'Luminal']

# # Extracting data for the gene HDAC7
# hdac7_data = data_numeric.loc['HDAC7']

# # Separate the data based on subtypes
# basal_values = hdac7_data[basal_columns]
# luminal_values = hdac7_data[luminal_columns]

# # Preparing data for the modified plot
# plot_data_df = pd.DataFrame({
#     'Subtype': ['Basal'] * len(basal_values) + ['Luminal'] * len(luminal_values),
#     'LogDiffExpr': list(basal_values.dropna().values) + list(luminal_values.dropna().values)
# })

# # Create the boxplot using pandas with specified axes labels
# ax = plot_data_df.boxplot(column='LogDiffExpr', by='Subtype', grid=False, notch=True, figsize=(10, 6))
# ax.set_title('Boxplot for HDAC7 Log Differential Expression Across Subtypes')
# ax.set_ylabel('Log Differential Expression')
# ax.set_xlabel('Subtype')
# plt.suptitle('')  # Remove the default title generated by pandas
# # plt.show()
# plt.savefig('/home/dataset/charts/HDAC_7-boxplot.png')


# # Extracting data for the gene HDAC7 again
# basal_data = data_numeric[basal_columns]
# luminal_data = data_numeric[luminal_columns]

# # Identifying the minimum p-value in each group again
# min_pvalue_basal = data_numeric.loc[basal_data.dropna().index, 'p-value'].min()
# min_pvalue_luminal = data_numeric.loc[luminal_data.dropna().index, 'p-value'].min()

# print(min_pvalue_basal, min_pvalue_luminal)



import pandas as pd
from scipy.stats import ttest_ind
import matplotlib.pyplot as plt

# Load the data
data = pd.read_csv('/home/dataset/EDS-1013.gct', sep='\t', skiprows=2)

# Extract subtype metadata
subtypes = data.loc[data['id'] == 'subtype'].iloc[0, 5:].to_dict()

# Filter out the metadata rows
data_filtered = data.iloc[5:].set_index('id')

# Convert data to numeric
data_numeric = data_filtered.drop(columns=['PROBE', 'Name_GeneSymbol', 'ID_geneid', 'DESCRIPTION']).apply(pd.to_numeric, errors='coerce')

# Separate the dataset based on the subtypes "basal" and "luminal"
basal_columns = [col for col, subtype in subtypes.items() if subtype == 'Basal']
luminal_columns = [col for col, subtype in subtypes.items() if subtype == 'Luminal']

# Extracting data for the gene HDAC7
hdac7_data = data_numeric.loc['HDAC7']

# Separate the data based on subtypes
basal_values = hdac7_data[basal_columns]
luminal_values = hdac7_data[luminal_columns]

# Preparing data for the boxplot
plot_data_df = pd.DataFrame({
  'Subtype': ['Basal'] * len(basal_values) + ['Luminal'] * len(luminal_values),
  'LogDiffExpr': list(basal_values.dropna().values) + list(luminal_values.dropna().values)
})

# Create the boxplot using pandas with specified axes labels
ax = plot_data_df.boxplot(column='LogDiffExpr', by='Subtype', grid=False, notch=True, figsize=(10, 6))
ax.set_title('Boxplot for HDAC7 Log Differential Expression Across Subtypes')
ax.set_ylabel('Log Differential Expression')
ax.set_xlabel('Subtype')
plt.suptitle('')  # Remove the default title generated by pandas
# plt.show()
plt.savefig('/home/dataset/charts/HDAC_7-boxplot.png')


# Perform t-test for each gene on the numeric data to compute the p-values
t_statistics = []
p_values = []

for index, row in data_numeric.iterrows():
  basal_values = row[basal_columns].dropna()
  luminal_values = row[luminal_columns].dropna()
  
  # Check if both basal and luminal groups have at least 2 values to perform t-test
  if len(basal_values) >= 2 and len(luminal_values) >= 2:
    t_stat, p_val = ttest_ind(basal_values, luminal_values, equal_var=False, nan_policy='omit')
    t_statistics.append(t_stat)
    p_values.append(p_val)
  else:
    t_statistics.append(None)
    p_values.append(None)

# Add the t-statistics and p-values to the dataframe
data_numeric['t-statistic'] = t_statistics
data_numeric['p-value'] = p_values

# Identifying the minimum p-value in each group
min_pvalue_basal = data_numeric['p-value'][data_numeric[basal_columns].dropna(how='all').index].min()
min_pvalue_luminal = data_numeric['p-value'][data_numeric[luminal_columns].dropna(how='all').index].min()

print('Basal: ', min_pvalue_basal,'Luminal: ', min_pvalue_luminal)


# Extract the samples for HDAC7 for both subtypes
basal_samples_hdac7 = hdac7_data[basal_columns].dropna().to_dict()
luminal_samples_hdac7 = hdac7_data[luminal_columns].dropna().to_dict()

print('Basal subtype for HDAC7: ', basal_samples_hdac7)
print('Luminal subtype for HDAC7: ', luminal_samples_hdac7)
